{"version":3,"sources":["components/QuotesContext/index.tsx","components/DragNDropRegion/index.tsx","components/Editor/index.tsx","components/Quote/index.tsx","components/DraggableQuote/index.tsx","extensions/quotes/quotes-extension.tsx","data.ts","App.tsx","index.tsx"],"names":["Index","createContext","QuotesProvider","quotes","children","quotesById","useMemo","reduce","acc","quote","id","Provider","value","DragNDropRegion","className","insertQuote","useCommands","context","useContext","Error","useQuotesContext","view","useEditorView","mouseCoords","useRef","handleMouseUp","useCallback","clientX","clientY","current","onDragEnd","result","draggableId","destination","droppableId","pos","posAtCoords","left","top","state","selection","anchor","author","username","color","rest","avatarColor","console","warn","onMouseUp","clsx","mouseToDragMap","Map","Editor","forwardRef","ref","isDragging","getRootProps","useRemirrorContext","mouseToDragEvent","type","newType","get","dragEvent","DragEvent","dom","dispatchEvent","onMouseOver","onMouseLeave","formatter","Intl","DateTimeFormat","navigator","language","Quote","text","url","date","draggableProps","dragHandleProps","dateObj","Date","style","backgroundColor","width","height","viewBox","fill","d","dateTime","toISOString","format","DraggableQuote","index","provided","snapshot","innerRef","QuotesExtension","extension","defaultOptions","render","thing","node","undefined","attrs","command","ReactComponent","props","options","ExtensionTag","Block","extra","override","defaults","default","selectable","draggable","atom","content","parseDOM","tag","priority","ExtensionPriority","Low","getAttrs","getAttribute","parse","parseFloat","toDOM","omitExtraAttributes","attributes","tr","dispatch","from","getTextSelection","doc","create","insert","NodeExtension","App","useRemirror","extensions","LinkExtension","BoldExtension","DropCursorExtension","stringHandler","manager","initialContent","isDropDisabled","droppableProps","map","placeholder","isDraggingOver","draggingOverWith","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b0b424a6.chunk.js","sourcesContent":["import { createContext, useMemo, useContext } from 'react';\nimport type { ReactNode } from 'react';\nimport type { Quote, QuoteMap } from '../../types';\n\nexport interface QuotesContextInterface {\n  quotes: Quote[];\n  quotesById: QuoteMap;\n}\n\nexport interface QuotesContextProps {\n  quotes: Quote[];\n  children: ReactNode | ReactNode[];\n}\n\nconst Index = createContext<QuotesContextInterface | null>(null);\n\nexport function QuotesProvider({\n  quotes,\n  children,\n}: QuotesContextProps): JSX.Element {\n  const quotesById: QuoteMap = useMemo(() => {\n    return quotes.reduce((acc, quote) => {\n      acc[quote.id] = quote;\n      return acc;\n    }, {} as QuoteMap);\n  }, [quotes]);\n\n  return (\n    <Index.Provider value={{ quotes, quotesById }}>{children}</Index.Provider>\n  );\n}\n\nexport function useQuotesContext(): QuotesContextInterface {\n  const context = useContext(Index);\n  if (context === null) {\n    throw new Error('useQuotesContext must be used within a QuotesProvider');\n  }\n  return context;\n}\n","import { MouseEventHandler, useCallback, useRef } from 'react';\nimport { DragDropContext, DropResult } from 'react-beautiful-dnd';\nimport clsx from 'clsx';\nimport { useCommands, useEditorView } from '@remirror/react';\nimport { useQuotesContext } from '../QuotesContext';\nimport type { ReactNode } from 'react';\n\nexport interface DragNDropRegionProps {\n  children: ReactNode | ReactNode[];\n  className?: string;\n}\n\ninterface MouseCoords {\n  clientX: number;\n  clientY: number;\n}\n\nexport const DragNDropRegion = ({\n  children,\n  className,\n}: DragNDropRegionProps): JSX.Element => {\n  const { insertQuote } = useCommands();\n  const { quotesById } = useQuotesContext();\n  const view = useEditorView();\n\n  const mouseCoords = useRef<MouseCoords>();\n\n  // onDragEnd does not give us access to the raw event, store the drag end position\n  // in a ref so we can use it to obtain ProseMirror document position.\n  const handleMouseUp: MouseEventHandler<HTMLDivElement> = useCallback(\n    ({ clientX, clientY }) => {\n      mouseCoords.current = { clientX, clientY };\n    },\n    [],\n  );\n\n  const onDragEnd = useCallback(\n    (result: DropResult) => {\n      const { draggableId, destination } = result;\n      if (destination?.droppableId !== 'editor') {\n        return;\n      }\n      if (!mouseCoords.current) {\n        console.warn('No usable mouse coordinates set');\n        return;\n      }\n\n      const { clientX, clientY } = mouseCoords.current;\n      const pos =\n        view.posAtCoords({ left: clientX, top: clientY })?.pos ??\n        view.state.selection.anchor;\n\n      const quote = quotesById[draggableId];\n      const {\n        author: { username, color },\n        ...rest\n      } = quote;\n      insertQuote({ ...rest, username, avatarColor: color }, pos);\n    },\n    [view, insertQuote, quotesById],\n  );\n\n  return (\n    <DragDropContext onDragEnd={onDragEnd}>\n      <div onMouseUp={handleMouseUp} className={clsx(className)}>\n        {children}\n      </div>\n    </DragDropContext>\n  );\n};\n","import { forwardRef, useCallback } from 'react';\nimport { useEditorView, useRemirrorContext } from '@remirror/react';\nimport type { MouseEventHandler } from 'react';\nimport type { Id } from '../../types';\nimport 'remirror/styles/all.css';\n\nconst mouseToDragMap = new Map([\n  ['mouseover', 'dragover'],\n  ['mouseleave', 'dragleave'],\n  ['mouseup', 'dragend'],\n]);\n\nexport interface EditorProps {\n  isDragging: boolean;\n  draggableId?: Id;\n}\n\nexport const Editor = forwardRef<HTMLElement, EditorProps>(\n  ({ isDragging, draggableId, ...rest }, ref) => {\n    const { getRootProps } = useRemirrorContext();\n    const view = useEditorView();\n\n    // For ProseMirror drop cursors to work we need to re-emit React Beautiful DND\n    // events as drag events\n    const mouseToDragEvent: MouseEventHandler<HTMLDivElement> = useCallback(\n      ({ type, view: eventView, ...rest }) => {\n        if (!isDragging) {\n          return;\n        }\n        const newType = mouseToDragMap.get(type);\n        if (!newType) {\n          return;\n        }\n\n        const dragEvent = new DragEvent(newType, rest);\n        view.dom.dispatchEvent(dragEvent);\n      },\n      [view, isDragging],\n    );\n\n    return (\n      <div className=\"remirror-theme\">\n        <div\n          {...rest}\n          {...getRootProps({ ref })}\n          onMouseOver={mouseToDragEvent}\n          onMouseLeave={mouseToDragEvent}\n          onMouseUp={mouseToDragEvent}\n        />\n      </div>\n    );\n  },\n);\n","import { forwardRef, useMemo } from 'react';\nimport {\n  DraggableProvidedDraggableProps,\n  DraggableProvidedDragHandleProps,\n} from 'react-beautiful-dnd';\nimport clsx from 'clsx';\nimport type { Quote as QuoteType } from '../../types';\nimport './Quote.css';\n\nconst formatter = new Intl.DateTimeFormat(navigator.language);\n\nexport interface QuoteProps\n  extends Pick<QuoteType, 'id' | 'text' | 'url' | 'date'> {\n  username: string;\n  avatarColor: string;\n  isDragging?: boolean;\n  draggableProps?: DraggableProvidedDraggableProps;\n  dragHandleProps?: DraggableProvidedDragHandleProps;\n  className?: string;\n}\n\nexport const Quote = forwardRef<HTMLDivElement, QuoteProps>(\n  (\n    {\n      id,\n      text,\n      url,\n      date,\n      username,\n      avatarColor,\n      isDragging = false,\n      draggableProps = {},\n      dragHandleProps = {},\n      className,\n    },\n    ref,\n  ) => {\n    const dateObj = useMemo(() => new Date(date), [date]);\n    return (\n      <div\n        ref={ref}\n        {...draggableProps}\n        {...dragHandleProps}\n        className={clsx('quote', className)}\n        data-quote=\"\"\n        data-id={id}\n        data-text={text}\n        data-url={url}\n        data-date={date}\n        data-username={username}\n        data-avatar-color={avatarColor}\n      >\n        <div className=\"quote__author\">\n          <div\n            className=\"quote__avatar\"\n            style={{ backgroundColor: avatarColor }}\n          >\n            <svg aria-hidden=\"false\" width=\"28\" height=\"20\" viewBox=\"0 0 28 20\">\n              <path\n                fill=\"currentColor\"\n                d=\"M23.0212 1.67671C21.3107 0.879656 19.5079 0.318797 17.6584 0C17.4062 0.461742 17.1749 0.934541 16.9708 1.4184C15.003 1.12145 12.9974 1.12145 11.0283 1.4184C10.819 0.934541 10.589 0.461744 10.3368 0.00546311C8.48074 0.324393 6.67795 0.885118 4.96746 1.68231C1.56727 6.77853 0.649666 11.7538 1.11108 16.652C3.10102 18.1418 5.3262 19.2743 7.69177 20C8.22338 19.2743 8.69519 18.4993 9.09812 17.691C8.32996 17.3997 7.58522 17.0424 6.87684 16.6135C7.06531 16.4762 7.24726 16.3387 7.42403 16.1847C11.5911 18.1749 16.408 18.1749 20.5763 16.1847C20.7531 16.3332 20.9351 16.4762 21.1171 16.6135C20.41 17.0369 19.6639 17.3997 18.897 17.691C19.3052 18.4993 19.7718 19.2689 20.3021 19.9945C22.6677 19.2689 24.8929 18.1364 26.8828 16.6466H26.8893C27.43 10.9731 25.9665 6.04728 23.0212 1.67671ZM9.68041 13.6383C8.39754 13.6383 7.34085 12.4453 7.34085 10.994C7.34085 9.54272 8.37155 8.34973 9.68041 8.34973C10.9893 8.34973 12.0395 9.54272 12.0187 10.994C12.0187 12.4453 10.9828 13.6383 9.68041 13.6383ZM18.3161 13.6383C17.0332 13.6383 15.9765 12.4453 15.9765 10.994C15.9765 9.54272 17.0124 8.34973 18.3161 8.34973C19.6184 8.34973 20.6751 9.54272 20.6543 10.994C20.6543 12.4453 19.6184 13.6383 18.3161 13.6383Z\"\n              ></path>\n            </svg>\n          </div>\n        </div>\n        <div className=\"quote__content\">\n          <h2 className=\"quote__header\">\n            <strong>{username}</strong>\n            <time dateTime={dateObj.toISOString()}>\n              {formatter.format(dateObj)}\n            </time>\n          </h2>\n          <p>{text}</p>\n        </div>\n      </div>\n    );\n  },\n);\n","import { Draggable } from 'react-beautiful-dnd';\nimport { Quote } from '../Quote';\nimport type { Quote as QuoteType } from '../../types';\n\nexport interface DraggableQuoteProps {\n  quote: QuoteType;\n  index: number;\n}\n\nexport const DraggableQuote = ({\n  quote,\n  index,\n}: DraggableQuoteProps): JSX.Element => {\n  const { author, ...rest } = quote;\n  return (\n    <Draggable draggableId={quote.id} index={index}>\n      {(provided, snapshot) => (\n        <Quote\n          ref={provided.innerRef}\n          {...rest}\n          username={author.username}\n          avatarColor={author.color}\n          draggableProps={provided.draggableProps}\n          dragHandleProps={provided.dragHandleProps}\n          isDragging={snapshot.isDragging}\n        />\n      )}\n    </Draggable>\n  );\n};\n","import { ComponentType } from 'react';\nimport {\n  ApplySchemaAttributes,\n  command,\n  CommandFunction,\n  DOMCompatibleAttributes,\n  extension,\n  ExtensionPriority,\n  ExtensionTag,\n  getTextSelection,\n  NodeExtension,\n  NodeExtensionSpec,\n  NodeSpecOverride,\n  omitExtraAttributes,\n  PrimitiveSelection,\n  ProsemirrorAttributes,\n} from '@remirror/core';\nimport { NodeViewComponentProps } from '@remirror/react';\nimport { Quote } from '../../components/Quote';\n\nexport interface QuoteOptions {\n  render?: (\n    props: NodeViewComponentProps,\n  ) => React.ReactElement<HTMLElement> | null;\n}\n\nfunction isQuoteAttributes(\n  thing: ProsemirrorAttributes<any> | ProsemirrorAttributes<QuoteAttributes>,\n): thing is ProsemirrorAttributes<QuoteAttributes> {\n  return (\n    (thing as ProsemirrorAttributes<QuoteAttributes>).id !== undefined &&\n    (thing as ProsemirrorAttributes<QuoteAttributes>).text !== undefined\n  );\n}\n\nconst DefaultRender: React.FC<NodeViewComponentProps> = ({ node }) => {\n  if (isQuoteAttributes(node.attrs) === false) {\n    return null;\n  }\n  const { id, text, url, date, username, avatarColor } = node.attrs;\n  return (\n    <Quote\n      id={id}\n      text={text}\n      url={url}\n      date={date}\n      username={username}\n      avatarColor={avatarColor}\n    />\n  );\n};\n\n/**\n * Adds a file node to the editor\n */\n@extension<QuoteOptions>({\n  defaultOptions: {\n    render: DefaultRender,\n  },\n})\nexport class QuotesExtension extends NodeExtension<QuoteOptions> {\n  get name() {\n    return 'quote' as const;\n  }\n\n  ReactComponent: ComponentType<NodeViewComponentProps> = props => {\n    return this.options.render(props);\n  };\n\n  createTags() {\n    return [ExtensionTag.Block];\n  }\n\n  createNodeSpec(\n    extra: ApplySchemaAttributes,\n    override: NodeSpecOverride,\n  ): NodeExtensionSpec {\n    return {\n      attrs: {\n        ...extra.defaults(),\n        id: { default: null },\n        text: { default: null },\n        url: { default: null },\n        date: { default: null },\n        username: { default: null },\n        avatarColor: { default: null },\n      },\n      selectable: true,\n      draggable: true,\n      atom: true,\n      content: '',\n      ...override,\n      parseDOM: [\n        {\n          tag: 'div[data-quote]',\n          priority: ExtensionPriority.Low,\n          getAttrs: dom => {\n            const anchor = dom as HTMLDivElement;\n            const id = anchor.getAttribute('data-id');\n            const text = anchor.getAttribute('data-text');\n            const url = anchor.getAttribute('data-url');\n            const date = anchor.getAttribute('data-date');\n            const username = anchor.getAttribute('data-username');\n            const avatarColor = anchor.getAttribute('data-avatar-color');\n\n            return {\n              ...extra.parse(dom),\n              id,\n              text,\n              url,\n              date: date ? parseFloat(date) : 0,\n              username,\n              avatarColor,\n            };\n          },\n        },\n        ...(override.parseDOM ?? []),\n      ],\n      toDOM: node => {\n        const { id, text, url, date, username, avatarColor, ...rest } =\n          omitExtraAttributes(node.attrs, extra);\n        const attrs: DOMCompatibleAttributes = {\n          ...extra.dom(node),\n          ...rest,\n          'data-quote': '',\n          'data-id': id,\n          'data-text': text,\n          'data-url': url,\n          'data-date': date,\n          'data-username': username,\n          'data-avatar-color': avatarColor,\n        };\n\n        return ['div', attrs];\n      },\n    };\n  }\n\n  @command()\n  insertQuote(\n    attributes: QuoteAttributes,\n    selection?: PrimitiveSelection,\n  ): CommandFunction {\n    return ({ tr, dispatch }) => {\n      const { from } = getTextSelection(selection ?? tr.selection, tr.doc);\n      const node = this.type.create(attributes);\n\n      dispatch?.(tr.insert(from, node));\n\n      return true;\n    };\n  }\n}\n\ninterface QuoteAttributes {\n  id: string;\n  text: string;\n  url: string;\n  date: number;\n  username: string;\n  avatarColor: string;\n}\n","import type { Author, Quote } from './types';\n\nconst jon: Author = {\n  username: 'jon',\n  color: '#3BA55C',\n};\n\nconst geireann: Author = {\n  username: 'geireann',\n  color: '#FAA61A',\n};\n\nconst loslobos: Author = {\n  username: 'loslobos',\n  color: '#5865F2',\n};\n\nconst laksandy: Author = {\n  username: 'laksandy',\n  color: '#757E8A',\n};\n\nconst aulneau: Author = {\n  username: 'aulneau',\n  color: '#ED4245',\n};\n\nconst emil: Author = {\n  username: 'emil',\n  color: '#FAA61A',\n};\n\nconst mrjack: Author = {\n  username: 'mrjack',\n  color: '#757E8A',\n};\n\nexport const quotes: Quote[] = [\n  {\n    id: '1',\n    text: \"Remirror looks amazing. As someone who struggled, and keeps struggling, to get up and running with ProseMirror, I can't believe I didn't find this project sooner.\",\n    author: jon,\n    url: 'https://discord.com/channels/726035064831344711/745695521305526302/881720147369402378',\n    date: 1630321200000,\n  },\n  {\n    id: '2',\n    text: \"I'm using @remirror for a project of mine and have absolutely loved it so far - thank you for the great tool!\",\n    author: geireann,\n    url: 'https://discord.com/channels/726035064831344711/745695521305526302/901871071131758694',\n    date: 1635073200000,\n  },\n  {\n    id: '3',\n    text: \"This is a pretty awesome library, can't wait to learn enough to contribute! 👍\",\n    author: loslobos,\n    url: 'https://discord.com/channels/726035064831344711/745695521305526302/901948527108825118',\n    date: 1635073200000,\n  },\n  {\n    id: '4',\n    text: 'Remirror is awesome so far 👏🏻 . I am a sponsor to the project now 👍 .',\n    author: laksandy,\n    url: 'https://discord.com/channels/726035064831344711/745695521305526302/852371706106347553',\n    date: 1623322800000,\n  },\n  {\n    id: '5',\n    text: 'Really loving the library, and very excited to be using it.',\n    author: aulneau,\n    url: 'https://discord.com/channels/726035064831344711/745695521305526302/813798175923896390',\n    date: 1614081600000,\n  },\n  {\n    id: '6',\n    text: \"Great work on this project! It's been very nice to work with.\",\n    author: emil,\n    url: 'https://discord.com/channels/726035064831344711/726035065338986528/738270486773104660',\n    date: 1596106800000,\n  },\n  {\n    id: '7',\n    text: 'Been building a project with remirror for over a year now. Thanks for all the hard work. Here to contribute where I can 🙂',\n    author: mrjack,\n    url: 'https://discord.com/channels/726035064831344711/726035065338986528/863597403880816701',\n    date: 1626001200000,\n  },\n];\n","import {\n  BoldExtension,\n  DropCursorExtension,\n  LinkExtension,\n} from 'remirror/extensions';\nimport { Remirror, useRemirror } from '@remirror/react';\nimport { Droppable } from 'react-beautiful-dnd';\nimport { DragNDropRegion } from './components/DragNDropRegion';\nimport { Editor } from './components/Editor';\nimport { DraggableQuote } from './components/DraggableQuote';\nimport { QuotesProvider } from './components/QuotesContext';\nimport { QuotesExtension } from './extensions/quotes';\nimport { quotes } from './data';\nimport type { Quote as QuoteType } from './types';\nimport './App.css';\n\nconst initialContent = `<p>Some love for <a href=\"https://remirror.io\">Remirror</a> from our <a href=\"https://remirror.io/chat\">Discord community</a>.</p>\n<p/>\n<p>⬅️ Drag and drop the quotes (powered by <a href=\"https://github.com/atlassian/react-beautiful-dnd\">react-beautiful-dnd</a>) onto this Remirror editor!</p>\n`;\n\nexport const App = () => {\n  const { manager, state } = useRemirror({\n    extensions: () => [\n      new QuotesExtension(),\n      new LinkExtension(),\n      new BoldExtension(),\n      new DropCursorExtension(),\n    ],\n    content: initialContent,\n    selection: 'start',\n    stringHandler: 'html',\n  });\n\n  return (\n    <Remirror manager={manager} initialContent={state}>\n      <QuotesProvider quotes={quotes}>\n        <header className=\"app__header\">\n          <h1>Remirror &amp; react-beautiful-dnd PoC</h1>\n        </header>\n        <DragNDropRegion className=\"app\">\n          <Droppable droppableId=\"list\" isDropDisabled>\n            {provided => (\n              <div\n                ref={provided.innerRef}\n                {...provided.droppableProps}\n                className=\"app__quotes\"\n              >\n                {quotes.map((quote: QuoteType, index: number) => (\n                  <DraggableQuote quote={quote} index={index} key={quote.id} />\n                ))}\n                {provided.placeholder}\n              </div>\n            )}\n          </Droppable>\n          <div className=\"app__editor\">\n            <Droppable droppableId=\"editor\">\n              {(provided, snapshot) => (\n                <div ref={provided.innerRef} {...provided.droppableProps}>\n                  <Editor\n                    isDragging={snapshot.isDraggingOver}\n                    draggableId={snapshot.draggingOverWith}\n                  />\n                  {provided.placeholder}\n                </div>\n              )}\n            </Droppable>\n          </div>\n        </DragNDropRegion>\n      </QuotesProvider>\n    </Remirror>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}